//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/MasterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MasterControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MasterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MasterControls"",
    ""maps"": [
        {
            ""name"": ""MainInputs"",
            ""id"": ""ed7c734c-638c-467a-9e1f-200e5f8d202e"",
            ""actions"": [
                {
                    ""name"": ""CameraMoveHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""96e593f9-0461-47fc-8666-8dfd611101f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""55aeecec-3ec4-43fa-b390-315e0348ba1d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5aa4bf1f-2b13-4bd5-b476-c23ab0391734"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6ec4cd58-6c33-44da-a8df-dac8cb502838"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainInputs
        m_MainInputs = asset.FindActionMap("MainInputs", throwIfNotFound: true);
        m_MainInputs_CameraMoveHorizontal = m_MainInputs.FindAction("CameraMoveHorizontal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainInputs
    private readonly InputActionMap m_MainInputs;
    private IMainInputsActions m_MainInputsActionsCallbackInterface;
    private readonly InputAction m_MainInputs_CameraMoveHorizontal;
    public struct MainInputsActions
    {
        private @MasterControls m_Wrapper;
        public MainInputsActions(@MasterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMoveHorizontal => m_Wrapper.m_MainInputs_CameraMoveHorizontal;
        public InputActionMap Get() { return m_Wrapper.m_MainInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainInputsActions set) { return set.Get(); }
        public void SetCallbacks(IMainInputsActions instance)
        {
            if (m_Wrapper.m_MainInputsActionsCallbackInterface != null)
            {
                @CameraMoveHorizontal.started -= m_Wrapper.m_MainInputsActionsCallbackInterface.OnCameraMoveHorizontal;
                @CameraMoveHorizontal.performed -= m_Wrapper.m_MainInputsActionsCallbackInterface.OnCameraMoveHorizontal;
                @CameraMoveHorizontal.canceled -= m_Wrapper.m_MainInputsActionsCallbackInterface.OnCameraMoveHorizontal;
            }
            m_Wrapper.m_MainInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraMoveHorizontal.started += instance.OnCameraMoveHorizontal;
                @CameraMoveHorizontal.performed += instance.OnCameraMoveHorizontal;
                @CameraMoveHorizontal.canceled += instance.OnCameraMoveHorizontal;
            }
        }
    }
    public MainInputsActions @MainInputs => new MainInputsActions(this);
    public interface IMainInputsActions
    {
        void OnCameraMoveHorizontal(InputAction.CallbackContext context);
    }
}
